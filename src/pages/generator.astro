---
import Layout from "../layouts/Layout.astro";
import { ui } from "../i18n/ui.js";
const locale = ((Astro.locals as any)?.lang ?? 'en') as 'en' | 'fr';
---

<Layout>
  <div
    class="flex flex-col h-full items-center justify-center glass bg-primary"
  >
    <div class="flex flex-col gap-8 mx-auto p-8 pt-6 w-full md:flex-row h-180">
      <!-- üñºÔ∏è Aper√ßu SVG -->
      <div
        class="card bg-base-100 shadow-md p-6 flex-1 flex flex-col items-center justify-center"
      >
        <div
          id="svg-container"
          class="w-full h-full flex justify-center items-center border border-dashed border-primary bg-gradient-to-br from-blue-50 to-blue-100"
        >
          <div
            id="svg-output"
            class="w-full h-full flex justify-center items-center"
          >
            <!-- SVG g√©n√©r√© sera ins√©r√© ici -->
          </div>
        </div>
      </div>

      <!-- üíª Code SVG -->
      <div
        class="card bg-neutral text-neutral-content shadow-md p-6 flex-1 overflow-auto"
      >
        <pre
          id="svg-code"
          class="bg-neutral text-neutral-content p-4 rounded text-sm whitespace-pre-wrap w-full h-full overflow-auto">
        </pre>
      </div>
    </div>

    <!-- ü§ñ S√©lecteur de mod√®le IA -->
    <div class="flex gap-4 w-full max-w-3xl px-8 mb-4 items-center">
      <label for="ai-model" class="text-base-300 font-medium">{ui[locale].generator.modelLabel}</label>
      <select id="ai-model" class="select select-bordered select-sm">
        <option value="meta-llama/Llama-3.1-8B-Instruct:novita">Llama 3.1 8B (HuggingFace)</option>
        <option value="openai/gpt-oss-20b:free">GPT OSS 20B (OpenRouter - Free)</option>
      </select>
    </div>

    <!-- ÔøΩüß† Prompt utilisateur -->
    <div class="flex gap-4 w-full max-w-3xl px-8 mb-8">
      <input
        id="user-prompt"
        type="text"
        placeholder={ui[locale].generator.promptLabel}
        class="input input-bordered w-full"
      />
      <button id="generate-button" class="btn btn-secondary">{ui[locale].generator.generateButton}</button>
      <button id="edit-button" class="btn btn-secondary">{ui[locale].generator.editButton}</button>
    </div>

    <!-- üíæ Enregistrement et t√©l√©chargement -->
    <div class="flex gap-4 mt-4 mb-12">
      <input
        id="svg-name"
        type="text"
        placeholder={ui[locale].generator.savePlaceholder}
        class="input input-bordered w-full"
      />
      <button id="save-button" class="btn btn-secondary">{ui[locale].generator.saveButton}</button>
      <button id="download-button" class="btn btn-accent">{ui[locale].generator.downloadButton}</button>
    </div>
  </div>

  <script>
    //@ts-nocheck
    let promptList = [];

    async function generateSVG(messages) {
      const selectedModel = document.getElementById("ai-model")?.value || "meta-llama/Llama-3.1-8B-Instruct:novita";
      
      const res = await fetch("/api/generateSVG", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ messages, model: selectedModel }),
      });

      if (!res.ok) throw new Error("Erreur serveur");

      const data = await res.json();
      return data.svg;
    }

    const promptElement = document.getElementById("user-prompt");
    const svgContainer = document.getElementById("svg-container");
    const svgOutput = document.getElementById("svg-output");
    const codeBlock = document.getElementById("svg-code");
    const generateButton = document.getElementById("generate-button");
    const editButton = document.getElementById("edit-button");
    const nameInput = document.getElementById("svg-name");
    const saveButton = document.getElementById("save-button");

    async function handleSubmit() {
      const prompt = promptElement?.value.trim();
      if (!prompt) {
        alert("Veuillez entrer un prompt SVG.");
        return;
      }

      promptList = [{ role: "user", content: prompt }];
      svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
      generateButton.disabled = true;
      editButton.disabled = true;

      try {
        const aiResponse = await generateSVG(promptList);
        const svgCode =
          aiResponse.content.match(/<svg[\s\S]*?<\/svg>/i)?.[0] || "";
        promptList.push({ role: "assistant", content: svgCode });

        if (svgOutput) svgOutput.textContent = svgCode;
        if (svgContainer) svgContainer.innerHTML = svgCode;
        if (codeBlock) codeBlock.textContent = svgCode;
      } catch (error) {
        console.error("Erreur SVG:", error);
        svgContainer.innerHTML = `<p class="text-error">Erreur de g√©n√©ration du SVG</p>`;
      } finally {
        generateButton.disabled = false;
        editButton.disabled = false;
      }
    }

    async function handleEdit() {
      const prompt = promptElement?.value.trim();
      if (!prompt) {
        alert("Veuillez entrer une modification.");
        return;
      }

      promptList.push({ role: "user", content: prompt });
      svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
      generateButton.disabled = true;
      editButton.disabled = true;

      try {
        const aiResponse = await generateSVG(promptList);
        const svgCode =
          aiResponse.content.match(/<svg[\s\S]*?<\/svg>/i)?.[0] || "";
        promptList.push({ role: "assistant", content: svgCode });

        if (svgOutput) svgOutput.textContent = svgCode;
        if (svgContainer) svgContainer.innerHTML = svgCode;
        if (codeBlock) codeBlock.textContent = svgCode;
      } catch (error) {
        console.error("Erreur SVG:", error);
        svgContainer.innerHTML = `<p class="text-error">Erreur de modification du SVG</p>`;
      } finally {
        generateButton.disabled = false;
        editButton.disabled = false;
        console.log("Historique des prompts :", promptList);
      }
    }

    async function saveSVG() {
      const name = nameInput?.value.trim();
      const svgCode = codeBlock?.textContent.trim();

      if (!name || !svgCode) {
        alert("Veuillez entrer un nom et g√©n√©rer un SVG avant d‚Äôenregistrer.");
        return;
      }

      try {
        const res = await fetch("/api/saveSVG", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          credentials: "include",
          body: JSON.stringify({ name, svg: svgCode, chat_history: promptList }),
        });

        if (!res.ok) throw new Error("Erreur lors de l‚Äôenregistrement");

        alert("‚úÖ SVG enregistr√© avec succ√®s !");
        nameInput.value = "";
      } catch (err) {
        console.error(err);
        alert("‚ùå √âchec de l‚Äôenregistrement du SVG.");
      }
    }

    async function downloadSVG() {
      const svgCode = codeBlock?.textContent.trim();
      const name = nameInput?.value.trim() || `svg-${Date.now()}`;

      if (!svgCode) {
        alert("Veuillez g√©n√©rer un SVG avant de le t√©l√©charger.");
        return;
      }

      // Cr√©er un blob et t√©l√©charger directement
      const blob = new Blob([svgCode], { type: 'image/svg+xml' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${name}.svg`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }

    window.addEventListener("DOMContentLoaded", () => {
      const downloadButton = document.getElementById("download-button");
      
      if (generateButton)
        generateButton.addEventListener("click", handleSubmit);
      if (editButton) editButton.addEventListener("click", handleEdit);
      if (saveButton) saveButton.addEventListener("click", saveSVG);
      if (downloadButton) downloadButton.addEventListener("click", downloadSVG);
    });
  </script>
</Layout>
