---
import Layout from "../layouts/Layout.astro";
---

<Layout>
    <div
        class="flex flex-col h-full items-center justify-center glass bg-primary"
    >
        <div class="flex flex-col gap-8 mx-auto p-8 w-full md:flex-row h-180">
            <!-- üñºÔ∏è Aper√ßu SVG -->
            <div
                class="card bg-base-100 shadow-md p-6 flex-1 flex flex-col items-center justify-center"
            >
                <div
                    id="svg-container"
                    class="w-full h-full flex justify-center items-center border border-dashed border-primary bg-gradient-to-br from-blue-50 to-blue-100"
                >
                    <div
                        id="svg-output"
                        class="w-full h-full flex justify-center items-center"
                    >
                        <!-- SVG g√©n√©r√© sera ins√©r√© ici -->
                    </div>
                </div>
            </div>

            <!-- üíª Code SVG -->
            <div
                class="card bg-neutral text-neutral-content shadow-md p-6 flex-1 overflow-auto"
            >
                <pre
                    id="svg-code"
                    class="bg-neutral text-neutral-content p-4 rounded text-sm whitespace-pre-wrap w-full h-full overflow-auto">
                </pre>
            </div>
        </div>
        <div class="flex gap-4 w-full max-w-3xl px-8 mb-8">
            <input
                id="user-prompt"
                type="text"
                placeholder="D√©crivez votre SVG..."
                class="input input-bordered w-full"
            />
            <button id="generate-button" class="btn btn-secondary"
                >G√©n√©rer</button
            >
        </div>
    </div>
</Layout>

<script>
  //@ts-nocheck

  // Fonction pour appeler l'API et r√©cup√©rer le SVG
  async function generateSVG(prompt) {
    console.log("Generating SVG for prompt:", prompt);
    const res = await fetch("/api/generateSVG", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ prompt }),
    });

    if (!res.ok) {
      throw new Error("Erreur serveur");
    }

    const data = await res.json();
    return data.svg;
  }

  // Fonction d√©clench√©e au clic sur le bouton
  async function handleSubmit() {
    const promptElement = document.getElementById("user-prompt");
    const prompt = promptElement ? promptElement.value.trim() : "";

    if (!prompt) {
      alert("Veuillez entrer un prompt SVG.");
      return;
    }

    const svgContainer = document.getElementById("svg-container");
    const svgOutput = document.getElementById("svg-output");
    const codeBlock = document.getElementById("svg-code");
    const generateButton = document.getElementById("generate-button");

    // üåÄ Affiche le spinner et d√©sactive le bouton
    svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
    generateButton.disabled = true;

    try {
      const svgCode = await generateSVG(prompt);
      console.log("svgCode:", svgCode);

      // üñºÔ∏è Affichage visuel du SVG
      svgContainer.innerHTML = svgCode;

      // üíª Affichage du code SVG brut
      if (codeBlock) {
        codeBlock.textContent = svgCode;
      }
    } catch (error) {
      console.error("Erreur lors de la g√©n√©ration du SVG :", error);
      alert("Une erreur est survenue lors de la g√©n√©ration du SVG.");
      svgContainer.innerHTML = `<p class="text-error">Erreur de g√©n√©ration du SVG</p>`;
    } finally {
      generateButton.disabled = false;
    }
  }

  // Attache l'√©v√©nement au bouton apr√®s chargement du DOM
  window.addEventListener("DOMContentLoaded", () => {
    const generateButton = document.getElementById("generate-button");
    if (generateButton) {
      generateButton.addEventListener("click", handleSubmit);
    }
  });
</script>
